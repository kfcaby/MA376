SST = sum((diet$omega.3-diet$mean1)^2)
diet = diet %>% group_by(fish) %>% mutate(mean2 = mean(omega.3))
#SSE
SSE = sum((diet$omega.3 - diet$mean2)^2)
#SSR
SSR = SST - SSE
#R^2
R2 = SSR/SST
#Fstat
Fstat = (SSR/4)/(SSE/22)
#Question: when is the Fstat big?
model = lm(omega.3 ~ fish, data = diet)
anova(model)
summary(model)
model = lm(omega.3 ~ fish, data = diet)
anova(model)
m = 5000
rsquared = c() #vector for simulated R2
fstat.sim = c() #vector for simulated Fstat
#Simulation
for(i in 1:m){
diet$sim.fish = sample(diet$fish) #shuffle fish categories
diet = diet %>% group_by(sim.fish) %>% mutate(mean2.sim = mean(omega.3)) #calculate new means
SSE.sim = sum((diet$omega.3 - diet$mean2.sim)^2) #calculate new SSE
rsquared[i] = 1-SSE.sim/SST #calculate new R2; Question: why don't we calculate SST everytime
fstat.sim[i] = ((SST-SSE.sim)/4)/(SSE.sim/22) #calculate Fstat
}
#Calculate p-value for R2 = 0.51
hist(rsquared, breaks = 50)
sum(rsquared > R2)/m
#Calculate p-value for Fstat = 5.62
hist(fstat.sim)
SSE
summary = diet %>%group_by(fish) %>% summarise(mean = mean(omega.3),
sd = sd(omega.3),
n = n())
summary
View(diet)
summary = diet %>%group_by(fish) %>%
summarise(mean =mean(omega.3),
sd = sd(omega.3),
n = n(),
residuals2 = sum((omega.3-mean2)^2)
)
summary
summary %>% mutate(pooledSD = sqrt(sum(residuals2)/26))
summary = summary %>% mutate(pooledSD = sqrt(sum(residuals2)/26))
qt(0.975,n-1)
qt(0.975,5)
#calculate confidence interval
summary = summary %>% mutate(LB = mean - qt(0.975,n-1)*pooledSD)
summary
summary = summary %>% mutate(UB = mean + qt(0.975,n-1)*pooledSD)
summary
summary = summary %>% mutate(pooledSD = sqrt(sum(residuals2)/(27-5)))
#calculate confidence interval
summary = summary %>% mutate(LB = mean - qt(0.975,n-1)*pooledSD)
summary = summary %>% mutate(UB = mean + qt(0.975,n-1)*pooledSD)
summary
diet
#calculate confidence interval
summary = summary %>% mutate(LB = mean - qt(0.975,n-1)*pooledSD/sqrt(n))
summary = summary %>% mutate(UB = mean + qt(0.975,n-1)*pooledSD/sqrt(n))
summary
#calculate confidence interval
summary = summary %>% mutate(LB = mean - qt(0.975,26)*pooledSD/sqrt(n))
summary = summary %>% mutate(UB = mean + qt(0.975,26)*pooledSD/sqrt(n))
summary
#calculate confidence interval
summary = summary %>% mutate(LBmean = mean - qt(0.975,26)*pooledSD/sqrt(n))
summary = summary %>% mutate(UBmean = mean + qt(0.975,26)*pooledSD/sqrt(n))
#calculate prediction interval
summary = summary %>% mutate(LBprediction = mean - qt(0.975,26)*pooledSD*sqrt(1+1/n))
summary = summary %>% mutate(UBprediction = mean + qt(0.975,26)*pooledSD*sqrt(1+1/n))
summary
summary
power.t.test(n = 18, delta = 1, sd = 2, power = NULL, type = "one.sample", alternative = "two.sided")
power.t.test(n = NULL, delta = 1, sd = 2, power = 0.80, type = "one.sample", alternative = "two.sided")
install.packages('pwr')
library(pwr)
R2 = 0.1
#Cohen's f statistic
f = sqrt(R2/1-R2)
#Cohen's f statistic
f = sqrt(R2/(1-R2))
pwr.anova.test(k = 5, n = 10, f = f, power = NULL)
R2 = 0.3
#Cohen's f statistic
f = sqrt(R2/(1-R2))
pwr.anova.test(k = 5, n = 10, f = f, power = NULL)
pwr.anova.test(k = NULL, n = 10, f = f, power = 0.80)
f = 5
dfModel = 5
dfResidual = 35
x = seq(0,10, by = 0.1)
pf(x,dfModel, dfResidual)
plot(x,pf(x,dfModel, dfResidual))
plot(x,df(x,dfModel, dfResidual))
1 - pf(f,dfModel, dfResidual)
x = seq(-5,5, by = 0.1)
n = 30
x = seq(-5,5, by = 0.1)
plot(x,dt(x,n-1))
qt(0.975,n-1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
diet = read.table(file = "http://www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx",
sep = "\t",
header = TRUE)
drivers = read_excel(file = "http://www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx")
library(tidyverse)
drivers = read_excel(file = "http://www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx")
library(readxl)
drivers = read_excel(file = "http://www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx")
drivers = read_excel(path = "http://www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx")
drivers = read_xlsx(path = "http://www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx")
drivers = read_xlsx(path = "www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx")
drivers = read_excel(path = "http://www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx")
drivers = read.table(file = "Driver Example/driverData")
View(drivers)
drivers = read.table(file = "Driver Example/driverData",
header = TRUE)
t.test(drivers$Facebook, drivers$Instagram)
drivers %>% gather(key = participant)
drivers %>% gather(key = condition, value = time)
drivers %>% gather(key = participant, value = time)
drivers %>% gather(key = "condition", value = "time")
drivers %>% gather(key = "condition", value = "time", -participant)
drivers %>%
gather(key = "condition", value = "time", -participant) %>%
ggplot(aes(x = condition, y = time)) + geom_boxplot()
t.test(drivers$Facebook, drivers$Instagram)
drivers = drivers %>% mutate(diff = Facebook - Instagram)
#Two sample t test - DON"T DO THIS
t.test(drivers$Facebook, drivers$Instagram)
#Paired t test
t.test(drivers$Facebook, drivers$Instagram,
paired = TRUE)
t.test(drivers$diff)
drivers %>% ggplot(aes(y = diff)) + geom_boxplot()
drivers %>%
gather(key = "condition", value = "time", -participant)
#find average time for each person
drivers = drivers %>% mutate(personAvg = (Facebook + Instagram)/2)
#find person effect
drivers = drivers %>% mutate(personEffect = personAvg - mean(Facebook,Instagram))
#find person effect
drivers = drivers %>% mutate(personEffect = personAvg - mean(c(Facebook,Instagram)))
lm(time ~ condition + participant, data = drivers)
lm(time ~ condition + participant, data = drivers %>%
gather(key = "condition", value = "time", -participant))
lm(time ~ condition + factor(participant), data = drivers %>%
gather(key = "condition", value = "time", -participant))
contrasts(drivers$participant) = contr.sum
drivers$participant = as.factor(drivers$participant)
contrasts(drivers$participant) = contr.sum
drivers_long = drivers %>%
gather(key = "condition", value = "time", -participant)
drivers_long = drivers %>%
gather(key = "condition", value = "time", -participant)
drivers_long$participant = as.factor(drivers_long$participant)
contrasts(drivers_long$participant) = contr.sum
contrasts(drivers_long$condition) = contr.sum
View(drivers_long)
drivers_long = drivers %>% select(participant, Facebook, Instagram)%>% gather(key = "condition", value = "time", -participant)
drivers_long$participant = as.factor(drivers_long$participant)
contrasts(drivers_long$participant) = contr.sum
contrasts(drivers_long$condition) = contr.sum
drivers_long$condition = as.factor(drivers_long$condition)
contrasts(drivers_long$condition) = contr.sum
lm(time ~ condition + factor(participant), data = drivers_long)
model = lm(time ~ condition + factor(participant), data = drivers_long)
summary(model)
model = lm(time ~ condition + participant, data = drivers_long)
summary(model)
drivers_long
#calculate SSE,SSR,SST by hand
drivers_long = drivers_long %>% mutate(mean1 = mean(time))
drivers_long = drivers_long %>% group_by() %>%
mutate(meanCondition = mean(time))
drivers_long = drivers_long %>% group_by(condition) %>%
mutate(meanCondition = mean(time))
drivers_long = drivers_long %>% group_by(condition) %>%
mutate(mediaEffect = meanCondition - mean1)
drivers_long %>% group_by(participant) %>%
mutate(personEffect = mean(time) - mean1)
drivers_long = drivers_long %>% group_by(participant) %>%
mutate(personEffect = mean(time) - mean1)
drivers_long = drivers_long %>% group_by(participant) %>%
mutate(prediction = mean1 + mediaEffect + personEffect)
#Reshape data.frame to long format
drivers_long = drivers %>% select(participant, Facebook, Instagram)%>% gather(key = "condition", value = "time", -participant)
#calculate SSE,SSR,SST by hand
#Overall Mean
drivers_long = drivers_long %>% mutate(mean1 = mean(time))
#Media Effect
drivers_long = drivers_long %>% group_by(condition) %>%
mutate(meanCondition = mean(time))
drivers_long = drivers_long %>% group_by(condition) %>%
mutate(mediaEffect = meanCondition - mean1)
#Person Effect
drivers_long = drivers_long %>% group_by(participant) %>%
mutate(personEffect = mean(time) - mean1)
#Prediction
drivers_long = drivers_long %>% group_by(participant) %>%
mutate(prediction = mean1 + mediaEffect + personEffect)
#Residual
drivers_long = drivers_long %>% group_by(participant) %>%
mutate(prediction = mean1 + mediaEffect + personEffect)
#Residual
drivers_long = drivers_long %>% group_by(participant) %>%
mutate(residual = time - prediction)
SSE = sum(drivers_long$residual^2)
SST = sum((drivers_long$time - drivers_long$mean1)^2)
anova(model)
SSmedia = sum((drivers_long$meanCondition - drivers_long$mean1)^2)
#Person Effect
drivers_long = drivers_long %>% group_by(participant) %>%
mutate(meanPerson = mean(time))
SSperson = sum((drivers_long$meanPerson - drivers_long$mean1)^2)
summary(model)
head(drivers_long)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
acft = read_csv("https://raw.githubusercontent.com/nick3703/MA376/master/ACFT.csv")
acft %>% ggplot(aes(x = Surface, y = Sled)) + geom_boxplot()
acft$Surface = factor(acft$Surface, levels = c("G","S","T"))
contrasts(acft$Surface) = contr.sum
single.lm = lm(Sled ~ Surface, data = acft)
summary(single.lm)
anova(single.lm)
f.sim = c()
m = 5000
for(i in 1:m){
acft$Surface.sim = sample(acft$Surface)
sim.model = lm(Sled ~ Surface.sim, data = acft)
f.sim[i] = anova(sim.model)$"F value"[1]
}
hist(f.sim)
summary = acft %>% group_by(Participant) %>% summarise(mean = mean(Sled))
summary %>% ggplot(aes(x = Participant, y = mean)) + geom_point()
adj.mod = lm(Sled ~ Surface + factor(Participant), data = acft)
summary(adj.mod)
anova(adj.mod)
f.adj = c()
acft.mod = acft
for(i in 1:m){
acft.mod = acft.mod %>% group_by(Participant) %>% sample_n(3)
acft.mod$shuffled.cat = rep(c("S","T","G"), 25)
shuff.lm = lm(Sled ~ shuffled.cat, data = acft.mod)
f.adj[i] = anova(shuff.lm)$"F value"[1]
}
hist(f.adj)
#calculate the block effect
acft = acft %>% group_by() %>% mutate(mean_overall = mean(Sled))
acft = acft %>% group_by(Participant) %>% mutate(mean_block = mean(Sled))
View(acft)
acft = acft %>% group_by(Participant) %>% mutate(block_effect = mean_block - mean_overall)
acft = acft %>% group_by() %>% mutate(Sled.adj = Sled - block_effect)
acft %>% ggplot(aes(x = Surface, y = Sled))
acft %>% ggplot(aes(x = Surface, y = Sled)) + geom_boxplot()
acft %>% ggplot(aes(x = Surface, y = Sled.adj)) + geom_boxplot()
acft %>% group_by(Surface) %>% summarise(mean = mean(Sled), sd = sd(Sled))
acft %>% group_by(Surface) %>% summarise(mean = mean(Sled.adj), sd = sd(Sled.adj))
sum(acft$block_effect)
adjusted.lm = lm(Sled.adj ~ Surface, data = acft)
summary(adjusted.lm)
anova(adjusted.lm)
anova(single.lm)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
acft = read_csv("https://raw.githubusercontent.com/nick3703/MA376/master/ACFT.csv")
acft %>% ggplot(aes(x = Surface, y = Sled)) + geom_boxplot()
acft$Surface = factor(acft$Surface, levels = c("G","S","T"))
contrasts(acft$Surface) = contr.sum
single.lm = lm(Sled ~ Surface, data = acft)
summary(single.lm)
anova(single.lm)
f.sim = c()
m = 5000
for(i in 1:m){
acft$Surface.sim = sample(acft$Surface)
sim.model = lm(Sled ~ Surface.sim, data = acft)
f.sim[i] = anova(sim.model)$"F value"[1]
}
hist(f.sim)
summary = acft %>% group_by(Participant) %>% summarise(mean = mean(Sled))
summary %>% ggplot(aes(x = Participant, y = mean)) + geom_point()
adj.mod = lm(Sled ~ Surface + factor(Participant), data = acft)
summary(adj.mod)
anova(adj.mod)
anova(single.lm)
f.adj = c()
acft.mod = acft
for(i in 1:m){
acft.mod = acft.mod %>% group_by(Participant) %>% sample_n(3)
acft.mod$shuffled.cat = rep(c("S","T","G"), 25)
shuff.lm = lm(Sled ~ shuffled.cat, data = acft.mod)
f.adj[i] = anova(shuff.lm)$"F value"[1]
}
hist(f.adj)
hist(f.sim)
#calculate the block effect
acft = acft %>% group_by() %>% mutate(mean_overall = mean(Sled))
acft = acft %>% group_by(Participant) %>% mutate(mean_block = mean(Sled))
acft = acft %>% group_by(Participant) %>% mutate(block_effect = mean_block - mean_overall)
acft = acft %>% group_by() %>% mutate(Sled.adj = Sled - block_effect)
acft %>% ggplot(aes(x = Surface, y = Sled.adj)) + geom_boxplot()
acft %>% group_by(Surface) %>% summarise(mean = mean(Sled), sd = sd(Sled))
acft %>% group_by(Surface) %>% summarise(mean = mean(Sled.adj), sd = sd(Sled.adj))
adjusted.lm = lm(Sled.adj ~ Surface, data = acft)
summary(adjusted.lm)
anova(adjusted.lm)
anova(single.lm)
acft %>% group_by(Surface) %>% summarise(mean = mean(Sled), sd = sd(Sled))
acft %>% group_by(Surface) %>% summarise(mean = mean(Sled.adj), sd = sd(Sled.adj))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
acft = read_csv("https://raw.githubusercontent.com/nick3703/MA376/master/ACFT.csv")
acft %>% ggplot(aes(x = Surface, y = Sled)) + geom_boxplot()
acft$Surface = factor(acft$Surface, levels = c("G","S","T"))
contrasts(acft$Surface) = contr.sum
single.lm = lm(Sled ~ Surface, data = acft)
summary(single.lm)
anova(single.lm)
f.sim = c()
m = 5000
for(i in 1:m){
acft$Surface.sim = sample(acft$Surface)
sim.model = lm(Sled ~ Surface.sim, data = acft)
f.sim[i] = anova(sim.model)$"F value"[1]
}
hist(f.sim)
summary = acft %>% group_by(Participant) %>% summarise(mean = mean(Sled))
summary %>% ggplot(aes(x = Participant, y = mean)) + geom_point()
adj.mod = lm(Sled ~ Surface + factor(Participant), data = acft)
summary(adj.mod)
anova(adj.mod)
anova(single.lm)
f.adj = c()
acft.mod = acft
for(i in 1:m){
acft.mod = acft.mod %>% group_by(Participant) %>% sample_n(3)
acft.mod$shuffled.cat = rep(c("S","T","G"), 25)
shuff.lm = lm(Sled ~ shuffled.cat, data = acft.mod)
f.adj[i] = anova(shuff.lm)$"F value"[1]
}
hist(f.adj)
hist(f.sim)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
acft = read_csv("https://raw.githubusercontent.com/nick3703/MA376/master/ACFT.csv")
View(acft)
acft %>% ggplot(aes(x = Surface, y = Sled)) + geom_boxplot()
simple.lm = lm(Sled ~ Surface, data = acft)
summary(simple.lm)
#get in terms of contrasts
contrasts(acft$Surface) = contr.sum
#get in terms of contrasts
acft$Surface = factor(acft$Surface)
contrasts(acft$Surface) = contr.sum
simple.lm = lm(Sled ~ Surface, data = acft)
summary(simple.lm)
mean(acft$Sled)
anova(simple.lm)
acft.mod = acft
for(i in 1:m){
acft.mod$Surface.sim = sample(acft.mod$Surface)
lm.sim = lm(Sled ~ Surface.sim, data = acft.mod)
f.simple[i] = anova(lm.sim)$"F value"[1]
}
m = 5000
f.simple = c()
acft.mod = acft
for(i in 1:m){
acft.mod$Surface.sim = sample(acft.mod$Surface)
lm.sim = lm(Sled ~ Surface.sim, data = acft.mod)
f.simple[i] = anova(lm.sim)$"F value"[1]
}
hist(f.simple)
adj.lm = lm(Sled ~ Surface + Participant, data = acft)
adj.lm = lm(Sled ~ Surface + Participant, data = acft)
summary(adj.lm)
adj.lm = lm(Sled ~ Surface + factor(Participant), data = acft)
summary(adj.lm)
f.adj = c()
acft.mod = acft
acft.mod = acft.mod %>% group_by(Participant) %>% sample_n(3)
View(acft.mod)
acft.mod$Surface.sim = rep(c("G","T","S"), 25)
for(i in 1:m){
acft.mod = acft.mod %>% group_by(Participant) %>% sample_n(3)
acft.mod$Surface.sim = rep(c("G","T","S"), 25)
shuff.lm = lm(Sled ~ Surface, data = acft.mod)
f.adj[i] = anova(shuff.lm)$"F value"[1]
}
for(i in 1:m){
acft.mod = acft.mod %>% group_by(Participant) %>% sample_n(3)
acft.mod$Surface.sim = rep(c("G","T","S"), 25)
shuff.lm = lm(Sled ~ Surface.sim, data = acft.mod)
f.adj[i] = anova(shuff.lm)$"F value"[1]
}
anova(shuff.lm)
anova(shuff.lm)$"F value"
hist(f.adj)
acft = acft %>% group_by() %>% mutate(mean_overall = mean(Sled))
acft = acft %>% group_by(Participant) %>% mutate(mean_block = mean(Sled))
acft = acft %>% groupby() %>% mutate(blockEffect = mean_block = mean_overall)
acft = acft %>% groupby() %>% mutate(blockEffect = mean_block - mean_overall)
acft = acft %>% group_by() %>% mutate(blockEffect = mean_block - mean_overall)
#adjust by subtracting block effect
acft = acft %>% mutate(Sled.adj = Sled - blockEffect)
acft %>% group_by(Surface) %>% summarise(mean(Sled.adj),
sd(Sled.adj))
acft %>% group_by(Surface) %>% summarise(mean(Sled),
sd(Sled))
sum(acft$blockEffect)
lm.adj = lm(Sled.adj ~ Surface, data = acft)
anova(lm.adj)
adj.lm = lm(Sled ~ Surface + factor(Participant), data = acft)
summary(adj.lm)
anova(adj.lm)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
acft = read_csv("https://raw.githubusercontent.com/nick3703/MA376/master/ACFT.csv")
acft %>% ggplot(aes(x = Surface, y = Sled)) + geom_boxplot()
contrasts(acft$Participant) = contr.sum
acft$Participant = factor(acft$Participant)
contrasts(acft$Participant) = contr.sum
adj.mod = lm(Sled ~ Surface + Participant, data = acft)
summary(adj.mod)
cred = read_csv(file = "http://www.isi-stats.com/isi2/data/CorporateCredibility.txt")
library(tidyverse)
cred = read_csv(file = "http://www.isi-stats.com/isi2/data/CorporateCredibility.txt")
cred = read.table(file = "http://www.isi-stats.com/isi2/data/CorporateCredibility.txt",
header = TRUE)
cred
cred %>% group_by(Treatments) %>% summarise(mean(PI), sd(PI), n())
mean(cred$PI)
cred$Endorser = factor(cred$Endorser)
cred$CorpCred = factor(cred$CorpCred)
contrasts(cred$Endorser) = contr.sum
contrasts(concred$CorpCred) = contr.sum
contrasts(cred$CorpCred) = contr.sum
cred %>% ggplot(aes(x = Treatments, y = PI)) + geom_boxplot()
oneway.lm = lm(PI ~ CorpCred + Endorser)
oneway.lm = lm(PI ~ CorpCred + Endorser, data = cred)
summary(oneway.lm)
anova(oneway.lm)
oneway.lm = lm(PI ~ Treatments, data = cred)
summary(oneway.lm)
anova(oneway.lm)
twoway.lm = lm(PI ~ CorpCred + Endorser, data = cred)
summary(twoway.lm)
anova(oneway.lm)
anova(twoway.lm)
residuals(twoway.lm)
cred$residuals.twoway = residuals(twoway.lm)
cred$fitted.twoway = fitted.values(twoway.lm)
cred %>% ggplot(aes(x = residuals.twoway)) + geom_histogram()
cred %>% ggplot(aes(x = fitted.twoway, y = residuals.twoway)) + geom_point()
library(tidyverse)
cred = read.table(file = "http://www.isi-stats.com/isi2/data/CorporateCredibility.txt",
header = TRUE)
cred %>% group_by(Treatments) %>% summarise(mean(PI), sd(PI), n())
cred %>% ggplot(aes(x = Treatments, y = PI)) + geom_boxplot()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
cred = read.table(file = "http://www.isi-stats.com/isi2/data/CorporateCredibility.txt",
header = TRUE)
cred = read.table(file = "http://www.isi-stats.com/isi2/data/CorporateCredibility.txt",
header = TRUE)
cred %>% group_by(Treatments) %>% summarise(mean(PI), sd(PI), n())
cred$Endorser = factor(cred$Endorser)
cred$CorpCred = factor(cred$CorpCred)
contrasts(cred$Endorser) = contr.sum
contrasts(cred$CorpCred) = contr.sum
contrasts(cred$Endorser) = contr.sum
View(cred)
oneway.lm = lm(PI ~ Treatments, data = cred)
summary(oneway.lm)
twoway.lm = lm(PI ~ Endorser + CorpCred, data = cred)
summary(twoway.lm)
summary(oneway.lm)
summary(twoway.lm)
contrasts(twoway.lm)
names(twoway.lm)
twoway.lm$xlevels
summary(twoway.lm)
cred %>% group_by(Endorser,CorpCred) %>% summarise(mean = mean(PI))
cred %>% group_by(Endorser,CorpCred) %>% summarise(mean = mean(PI)) %>% mutate(meanGrand = mean(mean))
cred %>% group_by(Endorser,CorpCred) %>% summarise(mean = mean(PI))
predict(twoway.lm, data = cred)
cred %>% group_by %>% mutate(prediction = predict(twoway.lm, data = cred))
cred %>% group_by() %>% mutate(prediction = predict(twoway.lm, data = cred))
cred %>% group_by(Endorser,CorpCred) %>% summarise(mean = mean(PI))
cred %>% group_by(Endorser,CorpCred) %>% summarise(mean = mean(PI))
cred %>% group_by() %>% mutate(prediction = predict(twoway.lm, data = cred))
anova(twoway.lm)
summary(lm(PI ~ Endorser, data = cred))
summary(twoway.lm)
chips = read.table(file = "http://www.isi-stats.com/isi2/data/MeltingTimes.txt",
header = TRUE)
chips = read.table(file = "http://www.isi-stats.com/isi2/data/MeltingTimes.txt",
header = TRUE, sep = "\t")
View(chips)
#convert from wide to long
chips
#convert from wide to long
chips %>% gather(key = "type", value = "time", -student)
#convert from wide to long
chips_long = chips %>% gather(key = "type", value = "time", -student)
