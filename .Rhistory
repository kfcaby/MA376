header = TRUE)
diet %>% group_by(fish) %>% summarise(mean(omega.3),
sd(omega.3),
n())
diet %>% ggplot(aes(y = omega.3)) + geom_boxplot()
diet = diet %>% filter(omega.3 < 0.08)
diet %>% ggplot(aes(x = fish, y = omega.3)) + geom_boxplot()
library(tidyverse)
diet = read.table(file = "http://www.isi-stats.com/isi2/data/FishOmega3.txt",
sep = "\t",
header = TRUE)
#descriptive statistics
diet %>% group_by(fish) %>% summarise(mean(omega.3),
sd(omega.3),
n())
diet %>% ggplot(aes(y = omega.3)) + geom_boxplot()
diet = diet %>% filter(omega.3 < 0.08)
diet %>% ggplot(aes(x = fish, y = omega.3)) + geom_boxplot()
diet = diet %>% mutate(mean1 = mean(omega.3))
SST = sum((diet$omega.3-diet$mean1)^2)
diet = diet %>% group_by(fish) %>% mutate(mean2 = mean(omega.3))
#SSE
SSE = sum((diet$omega.3 - diet$mean2)^2)
#SSR
SSR = SST - SSE
#R^2
R2 = SSR/SST
model = lm(omega.3 ~ fish, data = diet)
anova(model)
m = 5000
rsquared = c()
diet.sim = diet %>% mutate(fish.sim = sample(fish))
View(diet.sim)
diet.sim = diet %>% mutate(fish.sim = sample(fish))
diet.sim = diet.sim %>% group_by(fish.sim) %>% mutate(mean2.sim = mean(omega.3))
sample(diet$fish)
diet %>% mutate(fish.sim = sample(fish))
sim.diet = diet %>% mutate(sim.fish = sample(fish))
View(sim.diet)
sim.diet = diet %>% mutate(sim.fish = sample(fish, replace = FALSE))
sample(diet$fish)
diet$sim.fish = sample(diet$fish)
View(diet)
diet = diet %>% group_by(sim.fish) %>% mutate(mean2.sim = mean(omega.3))
SSE.sim = sum((diet$omega.3 - diet$mean2.sim)^2)
rsquared = 1-SSE.sim/SST
for(i in 1:m){
diet$sim.fish = sample(diet$fish)
diet = diet %>% group_by(sim.fish) %>% mutate(mean2.sim = mean(omega.3))
SSE.sim = sum((diet$omega.3 - diet$mean2.sim)^2)
rsquared[i] = 1-SSE.sim/SST
}
hist(rsquared)
hist(rsquared, breaks)
hist(rsquared, breaks = 50)
sum(rsquared > R2)/m
plot(df(seq(0,0.6,0.01), 4, 22))
x = seq(0,0.6,0.01)
plot(x, df(x,4,22))
x = seq(0,0.6,0.01)
plot(x, df(x,4,22))
df(x,4,22)
plot(x, df(x,4,22))
anova(model)
#Fstat
Fstat = (SSR/4)/(SSE/22)
summary(model)
for(i in 1:m){
diet$sim.fish = sample(diet$fish)
diet = diet %>% group_by(sim.fish) %>% mutate(mean2.sim = mean(omega.3))
SSE.sim = sum((diet$omega.3 - diet$mean2.sim)^2)
rsquared[i] = 1-SSE.sim/SST
fstat.sim[i] = ((SST-SSE.sim)/4)/(SSE.sim/22)
}
fstat.sim = c()
for(i in 1:m){
diet$sim.fish = sample(diet$fish)
diet = diet %>% group_by(sim.fish) %>% mutate(mean2.sim = mean(omega.3))
SSE.sim = sum((diet$omega.3 - diet$mean2.sim)^2)
rsquared[i] = 1-SSE.sim/SST
fstat.sim[i] = ((SST-SSE.sim)/4)/(SSE.sim/22)
}
hist(fstat.sim)
x = seq(0,10,0.1)
plot(x, df(x,4,22))
plot(x, df(x,4,22), type = "l")
hist(fstat.sim)
plot(x, df(x,4,22), type = "l")
1 - pf(5.62, 4, 22)
summary(model)
1 - pf(5.62, 4, 22)
library(tidyverse)
diet = read.table(file = "http://www.isi-stats.com/isi2/data/FishOmega3.txt",
sep = "\t",
header = TRUE)
diet = read_csv(file = "www.isi-stats.com/isi2/data/FishOmega3.txt")
library(tidyverse)
diet = read_csv(file = "www.isi-stats.com/isi2/data/FishOmega3.txt")
diet = read_csv(file = "http://www.isi-stats.com/isi2/data/FishOmega3.txt")
diet
diet = read.table(file = "http://www.isi-stats.com/isi2/data/FishOmega3.txt",
sep = "\t")
View(diet)
diet = read.table(file = "http://www.isi-stats.com/isi2/data/FishOmega3.txt",
sep = "\t",
header = TRUE)
View(diet)
#summary Statistics
diet %>% group_by(fish) %>% summarise(mean(omega.3),
sd(omega.3),
n())
diet %>% ggplot(aes(y = omega.3)) + geom_boxplot()
diet %>% ggplot(aes(y = omega.3)) + geom_boxplot() +
theme_classic()
diet %>% ggplot(aes(X = fish,y = omega.3)) + geom_boxplot() +
theme_classic()
diet %>% ggplot(aes(x = fish,y = omega.3)) + geom_boxplot() +
theme_classic()
diet %>% ggplot(aes(y = fish,x = omega.3)) + geom_boxplot() +
theme_classic()
diet %>% ggplot(aes(x = fish,y = omega.3)) + geom_boxplot() +
theme_classic() + coord_flip()
diet %>% ggplot(aes(x = fish,y = omega.3)) + geom_boxplot() +
theme_classic() + coord_flip() + labs(title = "Test")
diet %>% ggplot(aes(x = fish,y = omega.3)) + geom_boxplot() +
theme_classic() + coord_flip() + labs(title = "Boxplot of Omega3 by fish consumption")
diet = diet %>% mutate(mean1 = mean(omega.3))
SST = sum((diet$omega.3 - diet$mean1)^2)
#Equivalent to single mean model
model_onemean = lm(omega.3 ~ 1, data = diet)
diet %>% ggplot(aes(x = fish,y = omega.3)) + geom_boxplot() +
theme_classic() +  labs(title = "Boxplot of Omega3 by fish consumption")
diet = diet %>% group_by(fish) %>% mutate(meanSep = mean(omega.3))
SSE = sum((diet$omega.3 - diet$meanSep)^2)
R2 = 1 - SSE/SST
library(tidyverse)
Replications = NULL
Num.Reps = 1000
72/500
1/6
Replications = NULL
Num.Reps = 1000
Sample.Size = 500
Null.Prob = 1/6
Sample.Stat = 72/500
for (i in 1:Num.Reps) {
Trials = sample(x = c(1, 0), size = Sample.Size, prob = c(Null.Prob, 1 -
Null.Prob), replace = TRUE)
Proportion = sum(Trials)/Sample.Size
Replications = rbind(Replications, data.frame(Proportion))
}
Replications %>% ggplot(aes(x = Proportion)) + geom_histogram(fill = "cadetblue",
color = "black") + labs(x = "Proportion of Success", y = "Count") + geom_vline(xintercept = Sample.Stat,
color = "red")
Replications
Replications$Proportion <= Sample.Stat
sum(Replications$Proportion <= Sample.Stat)
sum(Replications$Proportion <= Sample.Stat)/Num.Reps
mean(Replications$Proportion)
sd(Replications$Proportion)
(72/500 - 1/6)/0.016
prop.test(x = 72, n = 500, p = 1/6, alternative = "less",
correct = FALSE)
candidates = data.frame(Year = c(2016,2016),
District = c("Adams",
"Adams"),
Candidate = c("Clinton", "Trump"),
Votes = c(20,30))
View(candidates)
library(tidyverse)
candidates %>% spread(key = Candidate, value = Votes)
candidates = data.frame(Year = c(2016,2016,2016,2016),
District = c("Adams",
"Adams",
"Ashland",
"Ashland"),
Candidate = c("Clinton", "Trump",
"Clinton","Trump"),
Votes = c(20,30,40,35))
candidates %>% spread(key = Candidate, value = Votes)
candidate_long = candidates %>% spread(key = Candidate, value = Votes)
candidate_long %>% mutate(clintonPercent = Clinton/(Clinton + Trump)*100)
install.packages('fivethirtyeight')
library(fivethirtyeight)
tarantino
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
diet = read.table(file = "http://www.isi-stats.com/isi2/data/FishOmega3.txt",
sep = "\t",
header = TRUE)
#descriptive statistics
diet %>% group_by(fish) %>% summarise(mean(omega.3),
sd(omega.3),
n())
diet %>% ggplot(aes(y = omega.3)) + geom_boxplot()
diet = diet %>% filter(omega.3 < 0.08)
diet %>% ggplot(aes(x = fish, y = omega.3)) + geom_boxplot()
diet = diet %>% mutate(mean1 = mean(omega.3))
SST = sum((diet$omega.3-diet$mean1)^2)
diet = diet %>% group_by(fish) %>% mutate(mean2 = mean(omega.3))
#SSE
SSE = sum((diet$omega.3 - diet$mean2)^2)
#SSR
SSR = SST - SSE
#R^2
R2 = SSR/SST
#Fstat
Fstat = (SSR/4)/(SSE/22)
model = lm(omega.3 ~ fish, data = diet)
anova(model)
summary(model)
model = lm(omega.3 ~ fish, data = diet)
anova(model)
aov(model)
pairwise.t.test(diet$omega.3, diet$fish)
summary = diet %>% group_by(fish) %>% summarise(mean(omega.3), sd(omega.3))
summary
summary = diet %>% group_by(fish) %>% summarise(mean(omega.3), sd(omega.3),n(
))
summary
(0.0404 - 0.377) - 2*(0.804 * sqrt(1/6 + 1/5))
(0.0404 - 0.377) - 2*(0.804 * sqrt(1/6 + 1/6))
(0.0404 - 0.377) + 2*(0.804 * sqrt(1/6 + 1/6))
install.packages('pairwiseCI')
library(pairwiseCI)
pairwiseCI(omega.3 ~ fish, data = diet)
pairwiseCI(omega.3 ~ fish, data = diet, pool.sd = TRUE)
pairwiseCI(omega.3 ~ fish, data = diet, pool.sd = TRUE, p.adjust.methods = "none")
qt(0.975,5)
qt(0.975,30)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
diet = read.table(file = "http://www.isi-stats.com/isi2/data/FishOmega3.txt",
sep = "\t",
header = TRUE)
#descriptive statistics
diet %>% group_by(fish) %>% summarise(mean(omega.3),
sd(omega.3),
n())
diet %>% ggplot(aes(y = omega.3)) + geom_boxplot()
diet = diet %>% filter(omega.3 < 0.08)
diet %>% ggplot(aes(x = fish, y = omega.3)) + geom_boxplot()
diet = diet %>% mutate(mean1 = mean(omega.3))
SST = sum((diet$omega.3-diet$mean1)^2)
diet = diet %>% group_by(fish) %>% mutate(mean2 = mean(omega.3))
#SSE
SSE = sum((diet$omega.3 - diet$mean2)^2)
#SSR
SSR = SST - SSE
#R^2
R2 = SSR/SST
#Fstat
Fstat = (SSR/4)/(SSE/22)
#Question: when is the Fstat big?
model = lm(omega.3 ~ fish, data = diet)
anova(model)
summary(model)
model = lm(omega.3 ~ fish, data = diet)
anova(model)
m = 5000
rsquared = c() #vector for simulated R2
fstat.sim = c() #vector for simulated Fstat
#Simulation
for(i in 1:m){
diet$sim.fish = sample(diet$fish) #shuffle fish categories
diet = diet %>% group_by(sim.fish) %>% mutate(mean2.sim = mean(omega.3)) #calculate new means
SSE.sim = sum((diet$omega.3 - diet$mean2.sim)^2) #calculate new SSE
rsquared[i] = 1-SSE.sim/SST #calculate new R2; Question: why don't we calculate SST everytime
fstat.sim[i] = ((SST-SSE.sim)/4)/(SSE.sim/22) #calculate Fstat
}
#Calculate p-value for R2 = 0.51
hist(rsquared, breaks = 50)
sum(rsquared > R2)/m
#Calculate p-value for Fstat = 5.62
hist(fstat.sim)
SSE
summary = diet %>%group_by(fish) %>% summarise(mean = mean(omega.3),
sd = sd(omega.3),
n = n())
summary
View(diet)
summary = diet %>%group_by(fish) %>%
summarise(mean =mean(omega.3),
sd = sd(omega.3),
n = n(),
residuals2 = sum((omega.3-mean2)^2)
)
summary
summary %>% mutate(pooledSD = sqrt(sum(residuals2)/26))
summary = summary %>% mutate(pooledSD = sqrt(sum(residuals2)/26))
qt(0.975,n-1)
qt(0.975,5)
#calculate confidence interval
summary = summary %>% mutate(LB = mean - qt(0.975,n-1)*pooledSD)
summary
summary = summary %>% mutate(UB = mean + qt(0.975,n-1)*pooledSD)
summary
summary = summary %>% mutate(pooledSD = sqrt(sum(residuals2)/(27-5)))
#calculate confidence interval
summary = summary %>% mutate(LB = mean - qt(0.975,n-1)*pooledSD)
summary = summary %>% mutate(UB = mean + qt(0.975,n-1)*pooledSD)
summary
diet
#calculate confidence interval
summary = summary %>% mutate(LB = mean - qt(0.975,n-1)*pooledSD/sqrt(n))
summary = summary %>% mutate(UB = mean + qt(0.975,n-1)*pooledSD/sqrt(n))
summary
#calculate confidence interval
summary = summary %>% mutate(LB = mean - qt(0.975,26)*pooledSD/sqrt(n))
summary = summary %>% mutate(UB = mean + qt(0.975,26)*pooledSD/sqrt(n))
summary
#calculate confidence interval
summary = summary %>% mutate(LBmean = mean - qt(0.975,26)*pooledSD/sqrt(n))
summary = summary %>% mutate(UBmean = mean + qt(0.975,26)*pooledSD/sqrt(n))
#calculate prediction interval
summary = summary %>% mutate(LBprediction = mean - qt(0.975,26)*pooledSD*sqrt(1+1/n))
summary = summary %>% mutate(UBprediction = mean + qt(0.975,26)*pooledSD*sqrt(1+1/n))
summary
summary
power.t.test(n = 18, delta = 1, sd = 2, power = NULL, type = "one.sample", alternative = "two.sided")
power.t.test(n = NULL, delta = 1, sd = 2, power = 0.80, type = "one.sample", alternative = "two.sided")
install.packages('pwr')
library(pwr)
R2 = 0.1
#Cohen's f statistic
f = sqrt(R2/1-R2)
#Cohen's f statistic
f = sqrt(R2/(1-R2))
pwr.anova.test(k = 5, n = 10, f = f, power = NULL)
R2 = 0.3
#Cohen's f statistic
f = sqrt(R2/(1-R2))
pwr.anova.test(k = 5, n = 10, f = f, power = NULL)
pwr.anova.test(k = NULL, n = 10, f = f, power = 0.80)
f = 5
dfModel = 5
dfResidual = 35
x = seq(0,10, by = 0.1)
pf(x,dfModel, dfResidual)
plot(x,pf(x,dfModel, dfResidual))
plot(x,df(x,dfModel, dfResidual))
1 - pf(f,dfModel, dfResidual)
x = seq(-5,5, by = 0.1)
n = 30
x = seq(-5,5, by = 0.1)
plot(x,dt(x,n-1))
qt(0.975,n-1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
diet = read.table(file = "http://www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx",
sep = "\t",
header = TRUE)
drivers = read_excel(file = "http://www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx")
library(tidyverse)
drivers = read_excel(file = "http://www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx")
library(readxl)
drivers = read_excel(file = "http://www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx")
drivers = read_excel(path = "http://www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx")
drivers = read_xlsx(path = "http://www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx")
drivers = read_xlsx(path = "www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx")
drivers = read_excel(path = "http://www.isi-stats.com/isi2/data/DriverBrakingTimes.xlsx")
drivers = read.table(file = "Driver Example/driverData")
View(drivers)
drivers = read.table(file = "Driver Example/driverData",
header = TRUE)
t.test(drivers$Facebook, drivers$Instagram)
drivers %>% gather(key = participant)
drivers %>% gather(key = condition, value = time)
drivers %>% gather(key = participant, value = time)
drivers %>% gather(key = "condition", value = "time")
drivers %>% gather(key = "condition", value = "time", -participant)
drivers %>%
gather(key = "condition", value = "time", -participant) %>%
ggplot(aes(x = condition, y = time)) + geom_boxplot()
t.test(drivers$Facebook, drivers$Instagram)
drivers = drivers %>% mutate(diff = Facebook - Instagram)
#Two sample t test - DON"T DO THIS
t.test(drivers$Facebook, drivers$Instagram)
#Paired t test
t.test(drivers$Facebook, drivers$Instagram,
paired = TRUE)
t.test(drivers$diff)
drivers %>% ggplot(aes(y = diff)) + geom_boxplot()
drivers %>%
gather(key = "condition", value = "time", -participant)
#find average time for each person
drivers = drivers %>% mutate(personAvg = (Facebook + Instagram)/2)
#find person effect
drivers = drivers %>% mutate(personEffect = personAvg - mean(Facebook,Instagram))
#find person effect
drivers = drivers %>% mutate(personEffect = personAvg - mean(c(Facebook,Instagram)))
lm(time ~ condition + participant, data = drivers)
lm(time ~ condition + participant, data = drivers %>%
gather(key = "condition", value = "time", -participant))
lm(time ~ condition + factor(participant), data = drivers %>%
gather(key = "condition", value = "time", -participant))
contrasts(drivers$participant) = contr.sum
drivers$participant = as.factor(drivers$participant)
contrasts(drivers$participant) = contr.sum
drivers_long = drivers %>%
gather(key = "condition", value = "time", -participant)
drivers_long = drivers %>%
gather(key = "condition", value = "time", -participant)
drivers_long$participant = as.factor(drivers_long$participant)
contrasts(drivers_long$participant) = contr.sum
contrasts(drivers_long$condition) = contr.sum
View(drivers_long)
drivers_long = drivers %>% select(participant, Facebook, Instagram)%>% gather(key = "condition", value = "time", -participant)
drivers_long$participant = as.factor(drivers_long$participant)
contrasts(drivers_long$participant) = contr.sum
contrasts(drivers_long$condition) = contr.sum
drivers_long$condition = as.factor(drivers_long$condition)
contrasts(drivers_long$condition) = contr.sum
lm(time ~ condition + factor(participant), data = drivers_long)
model = lm(time ~ condition + factor(participant), data = drivers_long)
summary(model)
model = lm(time ~ condition + participant, data = drivers_long)
summary(model)
drivers_long
#calculate SSE,SSR,SST by hand
drivers_long = drivers_long %>% mutate(mean1 = mean(time))
drivers_long = drivers_long %>% group_by() %>%
mutate(meanCondition = mean(time))
drivers_long = drivers_long %>% group_by(condition) %>%
mutate(meanCondition = mean(time))
drivers_long = drivers_long %>% group_by(condition) %>%
mutate(mediaEffect = meanCondition - mean1)
drivers_long %>% group_by(participant) %>%
mutate(personEffect = mean(time) - mean1)
drivers_long = drivers_long %>% group_by(participant) %>%
mutate(personEffect = mean(time) - mean1)
drivers_long = drivers_long %>% group_by(participant) %>%
mutate(prediction = mean1 + mediaEffect + personEffect)
#Reshape data.frame to long format
drivers_long = drivers %>% select(participant, Facebook, Instagram)%>% gather(key = "condition", value = "time", -participant)
#calculate SSE,SSR,SST by hand
#Overall Mean
drivers_long = drivers_long %>% mutate(mean1 = mean(time))
#Media Effect
drivers_long = drivers_long %>% group_by(condition) %>%
mutate(meanCondition = mean(time))
drivers_long = drivers_long %>% group_by(condition) %>%
mutate(mediaEffect = meanCondition - mean1)
#Person Effect
drivers_long = drivers_long %>% group_by(participant) %>%
mutate(personEffect = mean(time) - mean1)
#Prediction
drivers_long = drivers_long %>% group_by(participant) %>%
mutate(prediction = mean1 + mediaEffect + personEffect)
#Residual
drivers_long = drivers_long %>% group_by(participant) %>%
mutate(prediction = mean1 + mediaEffect + personEffect)
#Residual
drivers_long = drivers_long %>% group_by(participant) %>%
mutate(residual = time - prediction)
SSE = sum(drivers_long$residual^2)
SST = sum((drivers_long$time - drivers_long$mean1)^2)
anova(model)
SSmedia = sum((drivers_long$meanCondition - drivers_long$mean1)^2)
#Person Effect
drivers_long = drivers_long %>% group_by(participant) %>%
mutate(meanPerson = mean(time))
SSperson = sum((drivers_long$meanPerson - drivers_long$mean1)^2)
summary(model)
head(drivers_long)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
acft = read_csv("https://raw.githubusercontent.com/nick3703/MA376/master/ACFT.csv")
acft %>% ggplot(aes(x = Surface, y = Sled)) + geom_boxplot()
acft$Surface = factor(acft$Surface, levels = c("G","S","T"))
contrasts(acft$Surface) = contr.sum
single.lm = lm(Sled ~ Surface, data = acft)
summary(single.lm)
anova(single.lm)
f.sim = c()
m = 5000
for(i in 1:m){
acft$Surface.sim = sample(acft$Surface)
sim.model = lm(Sled ~ Surface.sim, data = acft)
f.sim[i] = anova(sim.model)$"F value"[1]
}
hist(f.sim)
summary = acft %>% group_by(Participant) %>% summarise(mean = mean(Sled))
summary %>% ggplot(aes(x = Participant, y = mean)) + geom_point()
adj.mod = lm(Sled ~ Surface + factor(Participant), data = acft)
summary(adj.mod)
anova(adj.mod)
f.adj = c()
acft.mod = acft
for(i in 1:m){
acft.mod = acft.mod %>% group_by(Participant) %>% sample_n(3)
acft.mod$shuffled.cat = rep(c("S","T","G"), 25)
shuff.lm = lm(Sled ~ shuffled.cat, data = acft.mod)
f.adj[i] = anova(shuff.lm)$"F value"[1]
}
hist(f.adj)
#calculate the block effect
acft = acft %>% group_by() %>% mutate(mean_overall = mean(Sled))
acft = acft %>% group_by(Participant) %>% mutate(mean_block = mean(Sled))
View(acft)
acft = acft %>% group_by(Participant) %>% mutate(block_effect = mean_block - mean_overall)
acft = acft %>% group_by() %>% mutate(Sled.adj = Sled - block_effect)
acft %>% ggplot(aes(x = Surface, y = Sled))
acft %>% ggplot(aes(x = Surface, y = Sled)) + geom_boxplot()
acft %>% ggplot(aes(x = Surface, y = Sled.adj)) + geom_boxplot()
acft %>% group_by(Surface) %>% summarise(mean = mean(Sled), sd = sd(Sled))
acft %>% group_by(Surface) %>% summarise(mean = mean(Sled.adj), sd = sd(Sled.adj))
sum(acft$block_effect)
adjusted.lm = lm(Sled.adj ~ Surface, data = acft)
summary(adjusted.lm)
anova(adjusted.lm)
anova(single.lm)
