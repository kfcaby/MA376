gl2018 %>%
group_by(VisitingTeam) %>%
summarize(runsScoredVisiting = sum(HomeRunsScore),
runsAllowedVisiting = sum(VisitorRunsScored)) -> visiting_PF
visiting_PF
gl2018 %>%
select(HomeTeam, VisitingTeam, HomeTeamGameNumber, VisitingTeamGameNumber) %>%
left_join(home_PF, by = c("HomeTeam" = "HomeTeam")) %>%
left_join(visiting_PF, by = c("VisitingTeam" = "VisitingTeam")) %>%
mutate(park_factor = ((runsScoredHome + runsAllowedHome)/sum(HomeTeamGameNumber))/((runsScoredVisiting + runsAllowedVisiting)/(sum(VisitingTeamGameNumber))))-> PF_data
PF_data
home_PF %>%
left_join(visting_PF, by= c("HomeTeam" = "VisitingTeam"))
home_PF %>%
left_join(visiting_PF, by= c("HomeTeam" = "VisitingTeam"))
data <- read_csv(file = "/Users/kfcummiskey/Downloads/penalties.csv")
data
model = lm(Duration ~ as.factor(Year), data = data)
summary(model)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
#library(tidyverse)
#library(knitr)
#redsox = read_csv(file = "Red Sox Season.csv")
#redsox = redsox %>% mutate(Result = factor(str_sub(`W/L`,start = 0, end = 1),
#                                           levels = c("W","L")))
#redsox = redsox %>% mutate(Field = case_when(is.na(X5) ~ "Home",
#                                                   TRUE ~ "Away"))
# Chunk 2
library(tidyverse)
library(knitr)
#---------------get retrosheet game log data---------------------#
website = "https://raw.githubusercontent.com/maxtoki/baseball_R/"
file = "master/data/game_log_header.csv"
glheaders <- read_csv(file = paste(website,file, sep = ""))
gamelogs2018 <- read_csv("GL2018.TXT",
col_names = names(glheaders),
na = character())
#Here is a small sample of the data.
gamelogs2018 %>%
select(Date, VisitingTeam, VisitorRunsScored, HomeTeam, HomeRunsScore) %>%
head(10)
# Chunk 3
#  Add a variable called WinningTeam.
gamelogs2018 %>%
mutate(WinningTeam = case_when(HomeRunsScore > VisitorRunsScored ~
HomeTeam,
VisitorRunsScored > HomeRunsScore ~
VisitingTeam)) -> gamelogs2018
# Let's look at only games the Red Sox were involved in.
gamelogs2018 %>%
filter(HomeTeam == "BOS" | VisitingTeam == "BOS" ) -> redsox
# add Result (W/L) and Field (Home/Away) variables
redsox %>%
mutate(Result = ifelse(WinningTeam == "BOS", "W","L"),
Field = ifelse(HomeTeam == "BOS", "Home", "Away")) -> redsox
# view sample of the redsox data frame.
redsox %>%
select(Date, VisitingTeam, VisitorRunsScored, HomeTeam, HomeRunsScore, Result, Field) %>%
head(10) %>%
kable(caption = "First 10 games of the Red Sox 2018 season")
# Chunk 4
summary = redsox %>%
group_by(Field)%>%
count(Result) %>%
spread(key = Field, value = n)
kable(summary, caption = "Results of the Red Sox 2018 Season")
# Chunk 5
measures = data.frame(prob = seq(0,.90, by = 0.001))
measures = measures %>% mutate(odds = prob/(1-prob))
measures %>% ggplot(aes(x = prob, y = odds)) +
geom_line() +
geom_line(aes(y = prob))
# Chunk 6
# two-sample z-test
phat_home = 57/81
phat_away = 51/81
phat = 108/162
#standardized statistic (pg 420)
z = (phat_home - phat_away)/sqrt(phat*(1-phat)*(1/81 + 1/81))
#p-value
2*(1-pnorm(z,0,1))
# Chunk 7
#calculate overall win/loss percentage
summary_overall = redsox %>% group_by(Result) %>%
count() %>% group_by() %>% mutate(perc = n/sum(n)) %>%
select(-n)
#calculate expected wins
summary_homeaway = redsox %>%
group_by(Field,Result) %>%
count() %>%
left_join(summary_overall, by = "Result") %>%
group_by(Field) %>%
mutate(expected = perc*sum(n))
summary_homeaway
#calculate chi-square statistic
chisq = summary_homeaway %>% group_by() %>%
summarise(chisq = sum((n - expected)^2/expected))
1- pchisq(chisq$chisq, 1)
# Chunk 8
redsox.sim = redsox %>% select(Result, Field)
riskDiff.sim = c()
n.sims = 5000
for(i in 1:n.sims){
summary.sim = redsox.sim %>%
mutate(Result.sim = sample(Result)) %>% #shuffle wins
group_by(Field) %>%
count(Result.sim) %>% mutate(p = n/sum(n)) #calculate win percentages
riskDiff.sim[i] = summary.sim$p[3]-summary.sim$p[1]
}
hist(riskDiff.sim, breaks = 50)
sum(abs(riskDiff.sim) > (phat_home - phat_away))/n.sims
# Chunk 9
#reverse factor levels for result
#so win is 1 and loss is 0
redsox$Result = factor(redsox$Result,
levels = c("L","W"))
model_homeaway = glm(Result ~ Field,
data = redsox,
family = "binomial")
summary(model_homeaway)
setwd("Chapter_6/")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
#library(tidyverse)
#library(knitr)
#redsox = read_csv(file = "Red Sox Season.csv")
#redsox = redsox %>% mutate(Result = factor(str_sub(`W/L`,start = 0, end = 1),
#                                           levels = c("W","L")))
#redsox = redsox %>% mutate(Field = case_when(is.na(X5) ~ "Home",
#                                                   TRUE ~ "Away"))
# Chunk 2
library(tidyverse)
library(knitr)
#---------------get retrosheet game log data---------------------#
website = "https://raw.githubusercontent.com/maxtoki/baseball_R/"
file = "master/data/game_log_header.csv"
glheaders <- read_csv(file = paste(website,file, sep = ""))
gamelogs2018 <- read_csv("GL2018.TXT",
col_names = names(glheaders),
na = character())
#Here is a small sample of the data.
gamelogs2018 %>%
select(Date, VisitingTeam, VisitorRunsScored, HomeTeam, HomeRunsScore) %>%
head(10)
# Chunk 3
#  Add a variable called WinningTeam.
gamelogs2018 %>%
mutate(WinningTeam = case_when(HomeRunsScore > VisitorRunsScored ~
HomeTeam,
VisitorRunsScored > HomeRunsScore ~
VisitingTeam)) -> gamelogs2018
# Let's look at only games the Red Sox were involved in.
gamelogs2018 %>%
filter(HomeTeam == "BOS" | VisitingTeam == "BOS" ) -> redsox
# add Result (W/L) and Field (Home/Away) variables
redsox %>%
mutate(Result = ifelse(WinningTeam == "BOS", "W","L"),
Field = ifelse(HomeTeam == "BOS", "Home", "Away")) -> redsox
# view sample of the redsox data frame.
redsox %>%
select(Date, VisitingTeam, VisitorRunsScored, HomeTeam, HomeRunsScore, Result, Field) %>%
head(10) %>%
kable(caption = "First 10 games of the Red Sox 2018 season")
# Chunk 4
summary = redsox %>%
group_by(Field)%>%
count(Result) %>%
spread(key = Field, value = n)
kable(summary, caption = "Results of the Red Sox 2018 Season")
# Chunk 5
measures = data.frame(prob = seq(0,.90, by = 0.001))
measures = measures %>% mutate(odds = prob/(1-prob))
measures %>% ggplot(aes(x = prob, y = odds)) +
geom_line() +
geom_line(aes(y = prob))
# Chunk 6
# two-sample z-test
phat_home = 57/81
phat_away = 51/81
phat = 108/162
#standardized statistic (pg 420)
z = (phat_home - phat_away)/sqrt(phat*(1-phat)*(1/81 + 1/81))
#p-value
2*(1-pnorm(z,0,1))
# Chunk 7
#calculate overall win/loss percentage
summary_overall = redsox %>% group_by(Result) %>%
count() %>% group_by() %>% mutate(perc = n/sum(n)) %>%
select(-n)
#calculate expected wins
summary_homeaway = redsox %>%
group_by(Field,Result) %>%
count() %>%
left_join(summary_overall, by = "Result") %>%
group_by(Field) %>%
mutate(expected = perc*sum(n))
summary_homeaway
#calculate chi-square statistic
chisq = summary_homeaway %>% group_by() %>%
summarise(chisq = sum((n - expected)^2/expected))
1- pchisq(chisq$chisq, 1)
# Chunk 8
redsox.sim = redsox %>% select(Result, Field)
riskDiff.sim = c()
n.sims = 5000
for(i in 1:n.sims){
summary.sim = redsox.sim %>%
mutate(Result.sim = sample(Result)) %>% #shuffle wins
group_by(Field) %>%
count(Result.sim) %>% mutate(p = n/sum(n)) #calculate win percentages
riskDiff.sim[i] = summary.sim$p[3]-summary.sim$p[1]
}
hist(riskDiff.sim, breaks = 50)
sum(abs(riskDiff.sim) > (phat_home - phat_away))/n.sims
# Chunk 9
#reverse factor levels for result
#so win is 1 and loss is 0
redsox$Result = factor(redsox$Result,
levels = c("L","W"))
model_homeaway = glm(Result ~ Field,
data = redsox,
family = "binomial")
summary(model_homeaway)
View(redsox)
redsox %>% gglot(aes(x = Field, y = Attendence)) + geom_histogram()
redsox %>% ggplot(aes(x = Field, y = Attendence)) + geom_histogram()
redsox %>% ggplot(aes(x = Field, y = Attendence)) + geom_boxplot()
glm(Result ~ Attendance, data = redsox, family = "binomial")
glm(Result ~ Attendence, data = redsox, family = "binomial")
model = glm(Result ~ Attendence, data = redsox, family = "binomial")
summary(model)
model = glm(Result ~ Attendence, data = filter(redsox,Field == "Home"), family = "binomial")
summary(model)
model = glm(Result ~ Attendence, data = filter(redsox,Field == "Away"), family = "binomial")
summary(model)
redsox %>%
filter(Field == "Home") %>%
group_by(as.factor(HomeRunsScore)) %>%
summarize(W = sum(Result == "W"),
n = n())
redsox %>%
filter(Field == "Home") %>%
group_by(as.factor(HomeRunsScore)) %>%
summarize(Wins = sum(Result == "W"),
Games = n())
redsox %>%
filter(Field == "Home") %>%
group_by(as.factor(HomeRunsScore)) %>%
summarize(Wins = sum(Result == "W"),
Games = n()) -> runs.summary
sum(runs.summary$Games)
# add Result (W/L) and Field (Home/Away) variables
redsox %>%
mutate(Result = ifelse(WinningTeam == "BOS", "W","L"),
Field = ifelse(HomeTeam == "BOS", "Home", "Away"),
RedSoxRunsScored = ifelse(HomeTeam == "BOS",
HomeRunsScore,
VisitorRunsScored)) -> redsox
redsox %>%
group_by(as.factor(RedSoxRunsScore)) %>%
summarize(Wins = sum(Result == "W"),
Games = n()) %>%
mutate(perc = Wins/Games) -> runs.summary
redsox %>%
group_by(as.factor(RedSoxRunsScored)) %>%
summarize(Wins = sum(Result == "W"),
Games = n()) %>%
mutate(perc = Wins/Games) -> runs.summary
runs.summary
redsox %>%
group_by(as.factor(RedSoxRunsScored)) %>%
summarize(Wins = sum(Result == "W"),
Games = n()) %>%
mutate(perc = Wins/Games,
logOdds = log(perc/(1 - perc))) -> runs.summary
runs.summary
runs.summary %>%
ggplot(aes(x = RedSoxRunsScored,
y = logOdds)) %>%
geom_point()
runs.summary %>%
ggplot(aes(x = RedSoxRunsScored,
y = logOdds)) +
geom_point()
runs.summary
redsox %>%
group_by(RedSoxRunsScored) %>%
summarize(Wins = sum(Result == "W"),
Games = n()) %>%
mutate(perc = Wins/Games,
logOdds = log(perc/(1 - perc))) -> runs.summary
runs.summary %>%
ggplot(aes(x = RedSoxRunsScored,
y = logOdds)) +
geom_point()
runs.summary %>%
ggplot(aes(x = RedSoxRunsScored,
y = perc)) +
geom_point()
model.runsScored <- glm(Result ~ RedSoxRunsScored, family = "binomial",
data = filter(redsox, RedSoxRunsScored < 8))
model.runsScored <- glm(Result == "W" ~ RedSoxRunsScored, family = "binomial",
data = filter(redsox, RedSoxRunsScored < 8))
summary(model.runsScored)
predict(model.runsScored, newdata = data.frame(RedSoxRunsScored = 0:7),
type = "response")
#restrict analysis to between 1 and 10 runs scored
model.runsScored <- glm(Result ~ RedSoxRunsScored,
family = "binomial",
data = filter(redsox,
RedSoxRunsScored >= 1,
RedSoxRunsScored <= 10))
#restrict analysis to between 1 and 10 runs scored
model.runsScored <- glm(Result == "W" ~ RedSoxRunsScored,
family = "binomial",
data = filter(redsox,
RedSoxRunsScored >= 1,
RedSoxRunsScored <= 10))
summary(model.runsScored)
# add Result (W/L) and Field (Home/Away) variables
redsox %>%
mutate(Result = ifelse(WinningTeam == "BOS", "W","L"),
Field = ifelse(HomeTeam == "BOS", "Home", "Away"),
RedSoxRunsScored = ifelse(HomeTeam == "BOS",
HomeRunsScore,
VisitorRunsScored),
RedSoxStartingPitcherName = ifelse(HomeTeam == "BOS",
HomeStartingPitcherName,
VisitorStartingPitcherName)) -> redsox
redsox %>% count(RedSoxStartingPitcherName)
redsox %>% count(RedSoxStartingPitcherName, Result)
redsox %>%
group_by(RedSoxRunsScored) %>%
summarize(Wins = sum(Result == "W"),
Games = n()) %>%
mutate(perc = Wins/Games,
logOdds = log(perc/(1 - perc))) -> runs.summary
runs.summary %>% head(10)
# a plot of the log odds
runs.summary %>%
ggplot(aes(x = RedSoxRunsScored,
y = perc)) +
geom_point()
# a plot of the log odds
runs.summary %>%
ggplot(aes(x = RedSoxRunsScored,
y = logOdds)) +
geom_point()
winProbs = tibble(RedSoxRunsScored = 0:15,
pred.win.perc = predict(model.runsScored,
newdata = RedSoxRunsScored,
type = "response"))
winProbs %>% mutate(pred.win.perc = predict(model.runsScored,
newdata = RedSoxRunsScored,
type = "response")) -> winProbs
winProbs = tibble(RedSoxRunsScored = 0:15)
winProbs %>% mutate(pred.win.perc = predict(model.runsScored,
newdata = RedSoxRunsScored,
type = "response")) -> winProbs
winProbs %>% mutate(pred.win.perc = predict(model.runsScored,
newdata = winProbs,
type = "response")) -> winProbs
winProbs
40/17
log(40/17)
log(22/8)
log((40/17)/(22/8))
1.011-0.15
log(18/9)
log(22/8)
log((18/9)/(22/8))
22/8
exp(0.33)
log(2)
exp(0.33)
library(Lahman)
Batting %>%
filter(yearID == 2018) %>%
filter(AB >= 500) %>%
mutate(SLG = (H - X2B - X3B - HR +
2 * X2B + 3*X3B + 4 * HR)/AB,
OBP = (H + BB + HBP)/(AB + BB+ HBP + SF),
OPS = SLG + OBP,
AVG = H/AB) %>%
left_join(Master %>% select(nameLast, nameFirst, playerID)) %>%
mutate(name = paste(nameFirst, nameLast, sep = " "))  -> yearly.stats
yearly.stats %>%
left_join(lg.stats, by = c("yearID","lgID")) -> yearly.stats
yearly.stats %>%
mutate(OPS.plus = 100 * ((OBP/OBP.lg + SLG/SLG.lg) - 1)) %>%
arrange(-OPS.plus) -> yearly.stats
gl2018 %>%
group_by(HomeTeam) %>%
summarize(runsScoredHome = sum(HomeRunsScore),
runsAllowedHome = sum(VisitorRunsScored)) -> home_PF
gamelogs2018 <- gl2018
gl2018 %>%
group_by(HomeTeam) %>%
summarize(runsScoredHome = sum(HomeRunsScore),
runsAllowedHome = sum(VisitorRunsScored)) -> home_PF
gl2018 <- gamelogs2018
gl2018 %>%
group_by(HomeTeam) %>%
summarize(runsScoredHome = sum(HomeRunsScore),
runsAllowedHome = sum(VisitorRunsScored)) -> home_PF
gl2018 %>%
group_by(VisitingTeam) %>%
summarize(runsScoredVisiting = sum(HomeRunsScore),
runsAllowedVisiting = sum(VisitorRunsScored)) -> visiting_PF
home_PF %>%
left_join(visiting_PF, by= c("HomeTeam" = "VisitingTeam")) %>%
mutate(park_factor = ((runsScoredHome + runsAllowedHome)/81)/((runsScoredVisiting + runsAllowedVisiting)/(81)))-> PF_data
yearly.stats %>%
inner_join(PF_data, by = c("teamID" = "HomeTeam")) %>%
mutate(new_OPS.plus = (100*(((OBP/OBP.lg)+(SLG/SLG.lg))-1))) %>%
mutate(adj_OPS.plus = new_OPS.plus + (1-park_factor) *(new_OPS.plus/2)) -> adjOPS.plus
Batting %>%
filter(yearID == 2018) %>%
filter(AB >= 500) %>%
group_by(playerID) %>%
summarize(H = sum(H),
AB = sum(AB),
HR = sum(HR),
SLG = (sum(H) - sum(X2B) - sum(X3B) - sum(HR) +
2 * sum(X2B) + 3*sum(X3B) + 4 * sum(HR))/sum(AB),
OBP = (sum(H) + sum(BB) + sum(HBP))/(sum(AB) + sum(BB)+ sum(HBP) + sum(SF))) %>%
mutate(OPS = SLG + OBP,
AVG = H/AB) %>%
left_join(Master %>% select(nameLast, nameFirst, playerID)) %>%
mutate(name = paste(nameFirst, nameLast, sep = " ")) %>%
select(name,everything(),-nameLast,-nameFirst) %>%
arrange(-OPS) %>%
head(10)-> player.careers
player.careers %>%
kable(caption = "Career Totals", digits = 3)
Batting %>%
filter(yearID == 2018) %>%
group_by(yearID, lgID) %>%
summarize(SLG.lg = (sum(H) - sum(X2B) - sum(X3B) - sum(HR) +
2 * sum(X2B) + 3*sum(X3B) + 4 * sum(HR))/sum(AB),
OBP.lg = (sum(H) + sum(BB) + sum(HBP))/(sum(AB) +
sum(BB)+ sum(HBP) + sum(SF)))-> lg.stats
lg.stats %>%
kable(caption = "OBP and SLG for Each League")
Batting %>%
filter(yearID == 2018) %>%
filter(AB >= 500) %>%
mutate(SLG = (H - X2B - X3B - HR +
2 * X2B + 3*X3B + 4 * HR)/AB,
OBP = (H + BB + HBP)/(AB + BB+ HBP + SF),
OPS = SLG + OBP,
AVG = H/AB) %>%
left_join(Master %>% select(nameLast, nameFirst, playerID)) %>%
mutate(name = paste(nameFirst, nameLast, sep = " "))  -> yearly.stats
yearly.stats %>%
left_join(lg.stats, by = c("yearID","lgID")) -> yearly.stats
#calculate OPS+
yearly.stats %>%
mutate(OPS.plus = 100 * ((OBP/OBP.lg + SLG/SLG.lg) - 1)) %>%
arrange(-OPS.plus) -> yearly.stats
yearly.stats %>%
select(name, OPS.plus) %>%
head(10) %>%
kable(caption = "OPS+")
gamelog2018 <- read_csv("GL2018.TXT")
glheaders <- read_csv("https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/game_log_header.csv")
gl2018 <- read_csv("GL2018.TXT",
col_names = names(glheaders),
na = character())
gl2018 %>%
group_by(HomeTeam) %>%
summarize(runsScoredHome = sum(HomeRunsScore),
runsAllowedHome = sum(VisitorRunsScored)) -> home_PF
gl2018 %>%
group_by(VisitingTeam) %>%
summarize(runsScoredVisiting = sum(HomeRunsScore),
runsAllowedVisiting = sum(VisitorRunsScored)) -> visiting_PF
home_PF %>%
left_join(visiting_PF, by= c("HomeTeam" = "VisitingTeam")) %>%
mutate(park_factor = ((runsScoredHome + runsAllowedHome)/81)/((runsScoredVisiting + runsAllowedVisiting)/(81)))-> PF_data
PF_data %>%
arrange(-park_factor) %>%
head(5) -> top_stadium
PF_data %>%
arrange(park_factor) %>%
head(5) -> bottom_stadium
yearly.stats %>%
inner_join(PF_data, by = c("teamID" = "HomeTeam")) %>%
mutate(new_OPS.plus = (100*(((OBP/OBP.lg)+(SLG/SLG.lg))-1))) %>%
mutate(adj_OPS.plus = new_OPS.plus + (1-park_factor) *(new_OPS.plus/2)) -> adjOPS.plus
adjOPS.plus %>%
select(name, adjOPS.plus) %>%
arrange(-adjOPS.plus) %>%
head(10) %>%
kable(caption = "Players with Highest Adjusted OPS+")
adjOPS.plus
adjOPS.plus %>%
select(name, adjOPS.plus) %>%
arrange(-adjOPS.plus) %>%
head(10) %>%
kable(caption = "Players with Highest Adjusted OPS+")
adjOPS.plus %>%
select(name, adj_OPS.plus) %>%
arrange(-adj_OPS.plus) %>%
head(10) %>%
kable(caption = "Players with Highest Adjusted OPS+")
install.packages(c("ggpubr", "retrosheet"))
